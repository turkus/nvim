return {
  --  "pmizio/typescript-tools.nvim",
  --  ft = {
  --    "javascript",
  --    "javascriptreact",
  --    "javascript.jsx",
  --    "typescript",
  --    "typescriptreact",
  --    "typescript.tsx",
  --  },
  --  dependencies = { "nvim-lua/plenary.nvim", "neovim/nvim-lspconfig" },
  --  config = function()
  --    require("typescript-tools").setup({
  --      on_attach = function(client, bufnr)
  --        if client.name == "typescript-tools" then
  --          vim.keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, { buffer = bufnr })
  --          vim.keymap.set(
  --            "n",
  --            "<leader>la",
  --            "<cmd>TSToolsAddMissingImports<cr>",
  --            { buffer = bufnr, desc = "Add Missing Imports" }
  --          )
  --          vim.keymap.set(
  --            "n",
  --            "<leader>lo",
  --            "<cmd>TSToolsOrganizeImports<cr>",
  --            { buffer = bufnr, desc = "Organize Imports" }
  --          )
  --          vim.keymap.set("n", "<leader>lO", "<cmd>TSToolsSortImports<cr>", { buffer = bufnr, desc = "Sort Imports" })
  --          vim.keymap.set("n", "<leader>lu", "<cmd>TSToolsRemoveUnused<cr>", { buffer = bufnr, desc = "Removed Unused" })
  --          vim.keymap.set(
  --            "n",
  --            "<leader>lr",
  --            "<cmd>TSToolsRemoveUnusedImports<cr>",
  --            { buffer = bufnr, desc = "Removed Unused Imports" }
  --          )
  --          vim.keymap.set(
  --            "n",
  --            "<leader>ld",
  --            "<cmd>TSToolsGoToSourceDefinition<cr>",
  --            { buffer = bufnr, desc = "Go To Source Definition" }
  --          )
  --          vim.keymap.set("n", "<leader>lf", "<cmd>TSToolsFixAll<cr>", { buffer = bufnr, desc = "Fix All" })
  --          -- vim.keymap.set("n", "<leader>j", vim.diagnostic.open_float, { desc = "Show diagnostics in floating window" })
  --        end
  --      end,
  --      settings = {
  --        expose_as_code_action = "all",
  --        jsx_close_tag = {
  --          enable = true,
  --          filetypes = { "javascriptreact", "typescriptreact" },
  --        },
  --        tsserver_file_preferences = {
  --          includeInlayParameterNameHints = "all",
  --          includeInlayParameterNameHintsWhenArgumentMatchesName = false,
  --          includeInlayFunctionParameterTypeHints = true,
  --          includeInlayVariableTypeHints = true,
  --          includeInlayVariableTypeHintsWhenTypeMatchesName = false,
  --          includeInlayPropertyDeclarationTypeHints = true,
  --          includeInlayFunctionLikeReturnTypeHints = true,
  --          includeInlayEnumMemberValueHints = true,
  --        },
  --        tsserver_plugins = {
  --          "@styled/typescript-styled-plugin",
  --        },
  --      },
  --    })
  --  end,
}
